
CREATE TABLE "public"."lab_users" ("id" serial NOT NULL, "name" text, "usp_id" text, "email" text, PRIMARY KEY ("id") , UNIQUE ("usp_id"), UNIQUE ("email"));COMMENT ON TABLE "public"."lab_users" IS E'All properties are nullable so we can comply with LGPD (a brazilian version of europe\'s GDPR).';

comment on TABLE "public"."lab_users" is E'All fields are nullable so we can comply with LGPD (a brazilian version of europe\'s GDPR).';

CREATE TABLE "public"."user_roles" ("value" text NOT NULL, "comment" text NOT NULL, PRIMARY KEY ("value") );

INSERT INTO "public"."user_roles"("value", "comment") VALUES ('student', 'A student of a lab.');

INSERT INTO "public"."user_roles"("value", "comment") VALUES ('operator', 'A lab operator. Can do anything he wishes in the lab of his domain');

INSERT INTO "public"."user_roles"("value", "comment") VALUES ('viewer', 'Anonymous viewer. Can only see non-private data from students and smart_plug metrics');

comment on TABLE "public"."smart_plug" is E'A smart plug is a device used to turn lab equipments into IoT enabled devices.';

comment on TABLE "public"."smart_plug" is E'A smart plug is a device used to turn lab equipments into IoT-enabled devices.';

comment on TABLE "public"."smart_plug" is E'A smart plug is a device used to turn lab equipments into IoT-enabled devices. It receives commands and generates metrics via MQTT.';

alter table "public"."lab_users" rename to "users";

alter table "public"."user_roles" rename to "user_role";

alter table "public"."users" rename to "user";

alter table "public"."user" add column "deleted_at" timestamptz
 null;

ALTER TABLE "public"."user" ALTER COLUMN "id" TYPE Text;
ALTER TABLE "public"."user" ALTER COLUMN "id" drop default;

comment on column "public"."user"."id" is E'This id is generated by firebase.';

comment on TABLE "public"."user" is E'All fields are nullable so we can comply with LGPD (a brazilian version of europe\'s GDPR). The only entity allowed to create users in this table is firebase itself, otherwise we risk running into syncing issues between the auth provider and our own table';

comment on TABLE "public"."user" is E'All fields are nullable so we can comply with LGPD (a brazilian version of europe\'s GDPR). The only entity allowed to create users in this table is firebase itself, otherwise we risk running into syncing issues between the auth provider and our own users table.';

comment on TABLE "public"."user" is E'All fields are nullable so we can comply with LGPD (a brazilian version of europe\'s GDPR). The only entity allowed to create users in this table is firebase itself, otherwise we risk running into syncing issues between the auth provider and our own user table.';

CREATE TABLE "public"."student_group" ("id" serial NOT NULL, "students" text NOT NULL, "lab" integer NOT NULL, "created_at" timestamptz NOT NULL DEFAULT now(), "updated_at" timestamptz NOT NULL DEFAULT now(), PRIMARY KEY ("id") , FOREIGN KEY ("students") REFERENCES "public"."user"("id") ON UPDATE restrict ON DELETE restrict, FOREIGN KEY ("lab") REFERENCES "public"."lab"("id") ON UPDATE restrict ON DELETE restrict);
CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"()
RETURNS TRIGGER AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER "set_public_student_group_updated_at"
BEFORE UPDATE ON "public"."student_group"
FOR EACH ROW
EXECUTE PROCEDURE "public"."set_current_timestamp_updated_at"();
COMMENT ON TRIGGER "set_public_student_group_updated_at" ON "public"."student_group" 
IS 'trigger to set value of column "updated_at" to current timestamp on row update';

comment on TABLE "public"."student_group" is E'Students are always grouped in groups of one or more students for each lab.';

comment on TABLE "public"."student_group" is E'Students are always grouped in groups of one or more students for each lab. Each group is usually assigned a lab_station.';

alter table "public"."student_group" add column "group_name" text
 not null;

alter table "public"."student_group" drop column "updated_at" cascade;

alter table "public"."student_group" drop column "created_at" cascade;

alter table "public"."student_group" rename column "lab" to "lab_id";

alter table "public"."student_group" rename column "students" to "student_id";

alter table "public"."user" add column "role_id" text
 not null;

alter table "public"."user"
  add constraint "user_role_id_fkey"
  foreign key ("role_id")
  references "public"."user_role"
  ("value") on update restrict on delete restrict;

alter table "public"."user_role" rename column "value" to "title";

alter table "public"."user" rename column "role_id" to "role_title";
